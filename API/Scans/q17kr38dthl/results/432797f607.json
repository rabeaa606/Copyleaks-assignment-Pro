{"statistics":{"identical":142,"minorChanges":14,"relatedMeaning":1},"text":{"value":" \n  Home\nAbout\nAdvertise / Sponsor\nContact\n Search    \n\nRecent Posts Using User Secrets Configuration In .NET\n Using SQL Server Sequences To Generate Unique Values\n Using EF Core Global Query Filters To Ignore Soft Deleted Entities\n Auto Updating Created, Updated and Deleted Timestamps In Entity Framework\n .NET 7 Preview 1 Has Been Released\nPopular Posts Reading Excel Files In C# .NET\n Creating And Validating JWT Tokens In C# .NET\n Using User Secrets Configuration In .NET\n Implicit Using Statements In .NET 6\n Fixing JSON Self Referencing Loop Exceptions\nCategoriesCoding Tutorials\nGeneral/News\nHosting/Deployments\nIntegration Tutorials\nTooling Tutorials\n  \n\nTutorials For NetworkTutorials For Angular\nTutorials For Cloud\nLinq By Example\n.NET QnA\n\n\n\n\nUsing Newtonsoft.Json In .NET Core 3+ ProjectsDecember 19, 2019 by Wade·14 Comments\n \nRecently I’ve been working a lot in .NET Core 3.0 and 3.1 projects. Both upgrading existing 2.2 projects and a couple of new greenfields projects. The thing that I’ve had to do in each and every one is switch from using the new System.Text.Json package back to using Newtonsoft.Json.\nIn almost all of them I’ve actually tried to keep going with System.Text.Json, but in the existing projects I haven’t had time to switch out things like custom JsonConverters or Newtonsoft.Json specific attributes on my models.\nIn new projects, I always get to the point where I just know how to do it in Newtonsoft. And as much as I want to try this shiny new thing, I have my own deadlines which don’t quite allow me to fiddle about with new toys.\nSo if you’re in the same boat as me and just need to get something out the door. The first thing you need is to install the following Nuget package :\nInstall-Package Microsoft.AspNetCore.Mvc.NewtonsoftJsonThen you need to add a specific call to your IMVCBuilder. This will differ depending on how you have set up your project. If you are migrating from an existing project you’ll have a call to “AddMvc()” which you can then tack onto it like so :\nservices.AddMvc().AddNewtonsoftJson();However in new .NET Core 3+ projects, you have a different set of calls replace MVC. So you’ll probably have one of the following :\nservices.AddControllers().AddNewtonsoftJson();\nservices.AddControllersWithViews().AddNewtonsoftJson();\nservices.AddRazorPages().AddNewtonsoftJson();If this is an API you will likely have AddControllers, but depending on your project setup you could have the others also. Tacking on AddNewtonsoftJson()  to the end means it will “revert” back to using Newtonsoft over System.Text.Json\n \n \nRelated PostsFixing JSON Self Referencing Loop Exceptions\nMigrating project.json .Net Core Projects To csproj\nOverride JSON.NET Serialization Settings Back To Default\nHow To Parse JSON In C# .NET\n\n\nENJOY THIS POST?\n     \n Join over 3,000 subscribers who are receiving our weekly post digest, a roundup of this weeks blog posts.\n We hate spam. Your email address will not be sold or shared with anyone else.\n\n\n\n\n\n\n 14 comments TRAN ANH NGOC says:\n January 19, 2020 at 7:01 pm\nIn .NET Core 3+ Projects: Newtonsoft.Json is better than built-in JsonConverter (De/Serialize). I get an error when use built-in Json Serialize with null string (no error with json.net). But I am still looking for a faster Json De/Serialize\n\nReply\n Wade says:\n January 20, 2020 at 7:35 am\nI’m about to do a post with a few gotchas that come with switching to the built in JSONConverter. Even things like by default, if you use the JSON Serializer outside an ASP.NET Core environment (For example in a console app to read a json file), it’s case sensitive. Or it doesn’t handle attributes to say “ignore if null” etc. There are quite a few things that are really really annoying.\n\nReply\n\n Hassan Faghihi says:\n May 2, 2020 at 10:38 pm\nI’m not worried over speed. they all always fret over speed, give us their undone baby products.\n Yes it is faster, and it should be way faster than what you see. the fact is, when you write 10 line of code to do something obvious it is way faster than when you write 100 for handling many more issues. and those old good codes and projects already handled almost everything, but for sure they become slow. and then someone else with name and power give us another template, say it’s better, it’s a lot faster, but it do nothing \nI don’t want to say Core its bad, it implemented with more of new day things in mind, but It’s not about speed, and I sometime miss a lot of things which worked but now doesn’t, and I have no extra time to get them work again.\n\nReply\n\n BMI says:\n April 21, 2022 at 3:57 am\nWell thank you. If I didn’t find this solution, I would probably return the web api service from .net core to the .net framework due to the number of problems in .net core, including serialization.\n\nReply\n\n\n Roman says:\n February 11, 2020 at 11:29 pm\nCould you please show where to provide settings for Newtonsof.json in .net  core 3+ projects?\n\nReply\n\n Dharmesh says:\n February 27, 2020 at 7:03 pm\nWe are migrating API from Core 2.2 to Core 3.1 and we do have only services.mvc() method.\n After that we used AddNewtonsoftJson() but it didn’t take changes and we are not able to use newtonsoft.json functionality like ignorenull value .\n Please assist us with that. Thanks.\n\nReply\n\n Hovik says:\n March 11, 2020 at 9:39 am\nservices.AddRazorPages().AddNewtonsoftJson();\n saved me!\nThank you...\n\nReply\n\n Todd says:\n March 23, 2020 at 12:59 pm\nThank you, adding\n services.AddMvc().AddNewtonsoftJson();\n fixed a problem where the ShouldSerializeX functions were not being called.\n\nReply\n\n Vildan says:\n April 17, 2020 at 2:32 am\nAfter upgrading from 2.2 to 3.1 JSON strigify could not handle cases with “new” property declaration. It was complaining: “The JSON property name for collides with another property”.\n After adding services.AddControllers().AddNewtonsoftJson() – resolved the problem. Thanks a lot!\n\nReply\n\n Michael DiSibio says:\n May 19, 2020 at 6:15 pm\nThank you for posting the three closely related topics together: the asp.net core serializer override, the swagger serializer override, and the ReferenceLoop handling override. I love .net core and the new asp.net core web api, but sheesh, why is it every five years we need to re-learn how to peddle the bike!? The documentation is only five times more volumnous now...\n\nReply\n\n suguna says:\n June 5, 2020 at 10:43 am\nHello,\nI have this “services.AddControllers().AddNewtonsoftJson()” but still getting The JSON property name for collides with another property. this error\n\nReply\n\n mikey says:\n July 31, 2020 at 9:06 am\nHello, I am getting System.InvalidOperationException: The ‘Microsoft.AspNetCore.Mvc.NewtonsoftJson.BsonTempDataSerializer’ cannot serialize an object of type ‘Newtonsoft.Json.Linq.JArray’.\nAnyone?\n\nReply\n Wade says:\n July 31, 2020 at 12:36 pm\nAre you able to create a minimal example and host it in Github?\n\nReply\n\n\n DB9999 says:\n November 14, 2021 at 2:47 pm\nAnyway to use Newtonsoft.Json in a console or winforms app in Dotnet5, or 6 (Core)?\n Bummer they don’t already support Core!\n\nReply\n\nLeave a Reply Cancel replyYour email address will not be published. Required fields are marked *\nComment *\nName * \nEmail * \nWebsite \n  \n\nΔ\n\n\n\n Privacy Policy\n\n\n\n  \n  ","pages":{"startPosition":[0,5000]},"comparison":{"identical":{"source":{"chars":{"starts":[77,156,243,260,308,372,390,495,554,640,791,872],"lengths":[78,86,16,21,63,17,104,41,85,132,80,66]},"words":{"starts":[13,25,43,44,49,60,61,78,84,102,131,147],"lengths":[11,17,0,3,10,0,16,4,17,26,15,11]}},"suspected":{"chars":{"starts":[910,989,1070,1087,1129,1187,1205,1304,1357,1443,1582,1657],"lengths":[78,80,16,21,57,17,98,41,85,126,74,66]},"words":{"starts":[131,143,161,162,168,179,180,197,204,222,252,268],"lengths":[11,17,0,3,10,0,16,4,17,26,15,11]}}},"minorChanges":{"source":{"chars":{"starts":[0,282],"lengths":[76,25]},"words":{"starts":[0,48],"lengths":[12,0]}},"suspected":{"chars":{"starts":[842,1109],"lengths":[67,16]},"words":{"starts":[118,166],"lengths":[12,0]}}},"relatedMeaning":{"source":{"chars":{"starts":[788],"lengths":[2]},"words":{"starts":[130],"lengths":[0]}},"suspected":{"chars":{"starts":[1576],"lengths":[2]},"words":{"starts":[250],"lengths":[0]}}}}},"html":{"value":null,"pages":null,"comparison":null},"version":3}